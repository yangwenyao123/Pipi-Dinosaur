@mixin black-box-shadow {
    box-shadow: 0 -1px 6px rgba(0, 0, 0, 0.1);
}
@mixin box-border {
    box-sizing: border-box;
}
@mixin center-text-align {
    text-align: center;
}
@mixin relative-position {
    position: relative;
}
@mixin block-display {
    display: block;
}

@mixin inline-block-display {
    display: inline-block;
}

@mixin inline-flex-display{
    display: inline-flex;
}

@mixin absolute-position {
    position: absolute;
}

@mixin relative-block{
    @include relative-position;
    @include block-display;
}

@mixin flex-display {
    display: flex;
}

@mixin wrap-flex-wrap {
    flex-wrap: wrap;
}

@mixin hidden-overflow {
    overflow: hidden;
}

@mixin center-align-items {
    align-items: center;
}

@mixin center-justify-content {
    justify-content: center;
}

@mixin middle-vertical-align {
    vertical-align: middle;
}

$color-fff: #fff;
$color-f1f1f1: #f1f1f1;
$color-666: #666;
$color-333: #333;
$color-ccc: #ccc;
$color-ddd: #ddd;
$color-888: #888;
$color-aaa: #aaa;
$color-fcf7e9: #fcf7e9;
$color-f0f0f0: #f0f0f0;

.foot {
    width: 100%;
    bottom: 0;
    z-index: 1024;
    @include black-box-shadow;
    position: fixed !important;
}

.block {
    display: block;
}

$none: none;

/* -- bar -- */
.cu-bar {
    display: flex;
    @include relative-position;
    align-items: center;
    min-height: 50px;
    justify-content: space-between;
}

/* -- 浮动 --  */
.cf::after,
.cf::before {
    content: " ";
    display: table;
}

.cf::after {
    clear: both;
}

.fl {
    float: left;
}

.fr {
    float: right;
}



$initial: initial;
$inherit: inherit;

$shadowSize: 3px 3px 4px;

/* -- 各种颜色类 --  */  
$color_vaue:(name: red, color: #e54d42, light: #fadbd9, gradual: linear-gradient(45deg, #f43f3b, #ec008c), shadow: rgba(204, 69, 59, 0.2)),
            (name: orange, color: #f37b1d, light: #fde6d2, gradual: linear-gradient(45deg, #ff9700, #ed1c24), shadow: rgba(217, 109, 26, 0.2)),
            (name: yellow, color: #fbbd08, light: #fef2ce, gradual: none, shadow: rgba(224, 170, 7, 0.2)),
            (name: olive, color: #8dc63f, light: #e8f4d9, gradual: none, shadow: rgba(124, 173, 55, 0.2)),
            (name: green, color: #39b54a, light: #d7f0db, gradual: linear-gradient(45deg, #39b54a, #8dc63f), shadow: rgba(48, 156, 63, 0.2)),
            (name: cyan, color: #1cbbb4, light: #d2f1f0, gradual: none, shadow: rgba(28, 187, 180, 0.2)),
            (name: blue, color: #0081ff, light: #cce6ff, gradual: linear-gradient(45deg, #0081ff, #1cbbb4), shadow: rgba(0, 102, 204, 0.2)),
            (name: purple, color: #6739b6, light: #e1d7f0, gradual: linear-gradient(45deg, #9000ff, #5e00ff), shadow: rgba(88, 48, 156, 0.2)),
            (name: mauve, color: #9c26b0, light: #ebd4ef, gradual: none, shadow: rgba(133, 33, 150, 0.2)),
            (name: pink, color: #e03997, light: #f9d7ea, gradual: linear-gradient(45deg, #ec008c, #6739b6), shadow: rgba(199, 50, 134, 0.2)),
            (name: brown, color: #a5673f, light: #ede1d9, gradual: none, shadow: rgba(140, 88, 53, 0.2)),
            (name: grey, color: #8799a3, light: #e7ebed, gradual: none, shadow: rgba(114, 130, 138, 0.2)),
            (name: gray, color: gray, light: #f1f1f1, gradual: none, shadow: rgba(114, 130, 138, 0.2)),
            (name: black, color: #333, light: none, gradual: none, shadow: rgba(26, 26, 26, 0.2)),
            (name: white, color: #fff, light: none, gradual: none, shadow: 6rpx 6rpx 8rpx);

@each $item in $color_vaue {
    $name: map-get($item, name);
    .line-#{$name}, .lines-#{$name}, text-#{$name} {
        &:after{
            border-color: map-get($item, color);
        }
        color: map-get($item, color);
    }
    .bg-gradual-#{$name} {
        background-image: map-get($item, gradual);
    }
    .bg-#{$name} {
        background-color: map-get($item, color);
        &.light{
            color: map-get($item, color);
            background: map-get($item, light);
        }
    }
    .bg-gradual-#{$name} {
        color: #fff;
        background-image: map-get($item, gradual);
    }
    .shadow[class*='-#{$name}'] {
        box-shadow:  $shadowSize map-get($item, shadow);
    }
    .text-shadow[class*='-#{$name}'] {
	    text-shadow: $shadowSize map-get($item, shadow);
    }
    .text-#{$name} {
        color: map-get($item, color);
    }
} 

/*  -- 内外边距 -- */

$space_size: (name: xs, value: 5px),
       (name: sm, value: 10px),
       (name: default, value: 15px),
       (name: lg, value: 20px),
       (name: xl, value: 25px);

$space_direction: (
    bottom,
    top,
    left,
    right,
    lr,
    tb
);
@each $item in $space_size {
    $name: map-get($item, name);
    .margin-#{$name} {
        margin: map-get($item, value);
    }
    .padding-#{$name} {
        padding: map-get($item, value);
    }
    @each $direction in $space_direction {
        .margin-#{$direction}-#{$name} {
            @if $direction == tb {
                margin-top:  map-get($item, value);
                margin-bottom: map-get($item, value);
            } @else if $direction == lr{
                margin-left:  map-get($item, value);
                margin-right: map-get($item, value);
            } @else {
                margin-#{$direction}:  map-get($item, value);
            }
        }
        .padding-#{$direction}-#{$name} {
            @if $direction == tb {
                padding-top:  map-get($item, value);
                padding-bottom: map-get($item, value);
            } @else if $direction == lr{
                padding-left:  map-get($item, value);
                padding-right: map-get($item, value);
            } @else {
                padding-#{$direction}:  map-get($item, value);
            }
        }
        
    }
}


/* ==================
          文本
 ==================== */
$font_size: (name: xs, value: 10px),
       (name: sm, value: 12px),
       (name: default, value: 14px),
       (name: lg, value: 16px),
       (name: xl, value: 18px),
       (name: xxl, value: 22px),
       (name: sl, value: 40px),
       (name: xsl, value: 60px);

@each $item in $font_size {
    $name: map-get($item, name);
    .text-#{$name} {
        font-size:  map-get($item, value);
    }
}

.text-Abc {
    text-transform: Capitalize;
}

.text-ABC {
    text-transform: Uppercase;
}

.text-abc {
    text-transform: Lowercase;
}

.text-price::before {
    content: "¥";
    font-size: 80%;
    margin-right: 4px;
}

.text-cut {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
}

.text-bold {
    font-weight: bold;
}

.text-center {
    text-align: center;
}

.text-content {
    line-height: 1.6;
}

.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

/* ==================
          边框
 ==================== */
 $border: (
    'solid',
    'solid-top',
    'solid-right',
    'solid-bottom',
    'solid-left',
    'solids',
    'solids-top',
    'solids-right',
    'solids-bottom',
    'solids-left',
    'dashed',
    'dashed-top',
    'dashed-left',
    'dashed-right',
    'dashed-bottom'
 );

 @each $item in $border {
    .#{$item} {
        position: relative;
    }
    .#{$item}::after {
        content: " ";
        width: 200%;
        height: 200%;
        @include absolute-position;
        top: 0;
        left: 0;
        border-radius: $inherit;
        transform: scale(0.5);
        transform-origin: 0 0;
        pointer-events: none;
        @include black-box-shadow;
    }
}

@function border($width: 1px, $style: solid, $color: rgba(0, 0, 0, 0.1)) {
    @return $width $style $color;
}
.solid::after {
    border: #{border()};
}

.solid-top::after {
    border-top:  #{border()};
}

.solid-right::after {
    border-right:  #{border()};
}

.solid-bottom::after {
    border-bottom:  #{border()};
}

.solid-left::after {
    border-left:  #{border()};
}

.solids::after {
    border: #{border(2px, solid, #eee)};
}

.solids-top::after {
    border-top: #{border(2px, solid, #eee)};
}

.solids-right::after {
    border-right: #{border(4px, solid, #eee)};
}

.solids-bottom::after {
    border-bottom: #{border(4px, solid, #eee)};
}

.solids-left::after {
    border-left: #{border(4px, solid, #eee)};
}

.dashed::after {
    border: #{border(1px, dashed, #ddd)};
}

.dashed-top::after {
    border-top:  #{border(1px, dashed, #ddd)};
}

.dashed-right::after {
    border-right:  #{border(1px, dashed, #ddd)};
}

.dashed-bottom::after {
    border-bottom:  #{border(1px, dashed, #ddd)};
}

.dashed-left::after {
    border-left:  #{border(1px, dashed, #ddd)};
}

/*  -- flex弹性布局 -- */
.flex {
    display: flex;
}

.basis-xs {
    flex-basis: 20%;
}

.basis-sm {
    flex-basis: 40%;
}

.basis-df {
    flex-basis: 50%;
}

.basis-lg {
    flex-basis: 60%;
}

.basis-xl {
    flex-basis: 80%;
}

.flex-sub {
    flex: 1;
}

.flex-twice {
    flex: 2;
}

.flex-treble {
    flex: 3;
}

.flex-direction {
    flex-direction: column;
}

.flex-wrap {
    flex-wrap: wrap;
}

.align-start {
    align-items: flex-start;
}

.align-end {
    align-items: flex-end;
}

.align-center {
    align-items: center;
}

.align-stretch {
    align-items: stretch;
}

.self-start {
    align-self: flex-start;
}

.self-center {
    align-self: flex-center;
}

.self-end {
    align-self: flex-end;
}

.self-stretch {
    align-self: stretch;
}

.align-stretch {
    align-items: stretch;
}

.justify-start {
    justify-content: flex-start;
}

.justify-end {
    justify-content: flex-end;
}

.justify-center {
    justify-content: center;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

/* grid布局 */

@function calcs($width, $number) {
    @return calc((100% - $width)/$number);
}

.grid {
    @include flex-display;
    @include wrap-flex-wrap;
    &.grid-square {
        @include hidden-overflow;
    }
    &.grid-square .cu-tag {
        @include absolute-position;
        right: 0;
        top: 0;
        border-bottom-left-radius: 6px;
    }
    &.grid-square>div>text[class*="icon"] {
        font-size: 26px;
        @include absolute-position;
        color: #aaa;
        margin: auto;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        @include flex-display;
        justify-content: center;
        align-items: center;
        flex-direction: column;
    }
    &.grid-square>div {
        margin-right: 20px;
        margin-bottom: 20px;
        border-radius: 6px;
        @include relative-position;
        @include hidden-overflow;
    }
    &.col-1.grid-square>div {
        padding-bottom: 100%;
        height: 0;
        margin-right: 0;
    }
    &.col-2.grid-square>div {
        padding-bottom: #{calcs(20px, 2)};
        height: 0;
        width: #{calcs(20px, 2)};
    }
    &.col-2.grid-square>div:nth-child(2n) {
        margin-right: 0;
    }
    &.col-3.grid-square>div {
        padding-bottom: #{calcs(40px, 3)};
        height: 0;
        width:  #{calcs(40px, 3)};
    }
    &.col-3.grid-square>div:nth-child(3n) {
        margin-right: 0;
    }
    &.col-4.grid-square>div {
        padding-bottom: #{calcs(60px, 4)};
        height: 0;
        width: #{calcs(60px, 4)};
    }
    &.col-4.grid-square>div:nth-child(4n) {
        margin-right: 0;
    }
    &.col-5.grid-square>div {
        padding-bottom: #{calcs(80px, 5)};
        height: 0;
        width: #{calcs(80px, 5)};
    }
    &.col-1>div {
        width: 100%;
    }
    &.col-2>div {
        width: 50%;
    }
    &.col-3>div {
        width: 33.33%;
    }
    &.col-4>div {
        width: 25%;
    }
    &.col-5>div {
        width: 20%;
    }
}

.shadow {
    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.1);
}
.shadow-lg {
    box-shadow: 0px 40px 100px 0px rgba(0, 0, 0, 0.07);
}
.shadow-warp {
    position: relative;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    &:after {
        right: 20px;
        left: auto;
        transform: rotate(3deg);
    }
}
.shadow-warp:before,
.shadow-warp:after {
    position: absolute;
    content: "";
    top: 20px;
    bottom: 30px;
    left: 20px;
    width: 50%;
    box-shadow: 0 30px 20px rgba(0, 0, 0, 0.2);
    transform: rotate(-3deg);
    z-index: -1;
}


.shadow-blur {
    position: relative;
    &::before {
        content: "";
        display: block;
        background: inherit;
        filter: blur(10px);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 10px;
        left: 10px;
        z-index: -1;
        opacity: 0.4;
        transform-origin: 0 0;
        border-radius: inherit;
        transform: scale(1, 1);
    }
}